
oppgave7_knapp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bc  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d9  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ed  00000000  00000000  00001149  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a9  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 98 00 	call	0x130	; 0x130 <main>
  88:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z4initv>:
	volatile int timerInterrupt;
}

void init()
{
	DDRD |= (1 << DDD7); //set pin 7 as output in data-direction of port D
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	80 68       	ori	r24, 0x80	; 128
  94:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PIND6); //set pin 6 of port D as input
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8f 7b       	andi	r24, 0xBF	; 191
  9a:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<PD7); //set pin 7 low as initial value
  9c:	8b b1       	in	r24, 0x0b	; 11
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PD6); //set pin 6 high to enable pull up-resistor to read state
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	8b b9       	out	0x0b, r24	; 11
	
	// pin change interrupt:
	PCICR |= (1<<PCIE2); // enable pin change interrupt control register PCIE2 for PD6
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT22); //enable pin change mask register for PCINT22 PD6, not external
  b2:	ed e6       	ldi	r30, 0x6D	; 109
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
	sei(); //enable global interrupt, enable I-bit of SREG
  bc:	78 94       	sei
	
	//namespace initial:
	intVars::count = 0;
  be:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_ZN7intVars5countE+0x1>
  c2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_ZN7intVars5countE>
	intVars::timerInterrupt = 0;
  c6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ca:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	intVars::interrupted = false;
  ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_ZN7intVars11interruptedE>
  d2:	08 95       	ret

000000d4 <__vector_5>:
}

ISR(PCINT2_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
	if ((( ( PIND & (1 << PD6) ) >> PD6 ) == 0) & (intVars::timerInterrupt == 0)) //enable only if button is low/pushed down
  e6:	99 b1       	in	r25, 0x09	; 9
  e8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	96 fd       	sbrc	r25, 6
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	88 23       	and	r24, r24
  f8:	91 f0       	breq	.+36     	; 0x11e <__vector_5+0x4a>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	23 2b       	or	r18, r19
  fe:	09 f0       	breq	.+2      	; 0x102 <__vector_5+0x2e>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	88 23       	and	r24, r24
 104:	61 f0       	breq	.+24     	; 0x11e <__vector_5+0x4a>
	{
		intVars::interrupted = true;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZN7intVars11interruptedE>
		intVars::count++;
 10c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_ZN7intVars5countE>
 110:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <_ZN7intVars5countE+0x1>
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_ZN7intVars5countE+0x1>
 11a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_ZN7intVars5countE>
	else //button is up
	{
		//do nothing
	}
	
}
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	3f 91       	pop	r19
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <main>:

int main(void)
{
	//initialize
	init();
 130:	0e 94 48 00 	call	0x90	; 0x90 <_Z4initv>
	
	while (true) // run forever
	{
		if (intVars::interrupted)
 134:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_ZN7intVars11interruptedE>
 138:	88 23       	and	r24, r24
 13a:	79 f0       	breq	.+30     	; 0x15a <main+0x2a>
		{
			intVars::timerInterrupt++;
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 140:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	89 ef       	ldi	r24, 0xF9	; 249
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x22>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x28>
 158:	00 00       	nop
			_delay_ms(1);
		}
		
		if (intVars::timerInterrupt >= 300)
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 162:	8c 32       	cpi	r24, 0x2C	; 44
 164:	91 40       	sbci	r25, 0x01	; 1
 166:	34 f0       	brlt	.+12     	; 0x174 <main+0x44>
		{
			intVars::timerInterrupt = 0;
 168:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			intVars::interrupted = false;
 170:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_ZN7intVars11interruptedE>
		}
		
		if ((intVars::count % 2) == 1) // if count is odd, turn light on, if count is even turn light off
 174:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_ZN7intVars5countE>
 178:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <_ZN7intVars5countE+0x1>
 17c:	81 70       	andi	r24, 0x01	; 1
 17e:	90 78       	andi	r25, 0x80	; 128
 180:	99 23       	and	r25, r25
 182:	24 f4       	brge	.+8      	; 0x18c <main+0x5c>
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	8e 6f       	ori	r24, 0xFE	; 254
 188:	9f 6f       	ori	r25, 0xFF	; 255
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	21 f4       	brne	.+8      	; 0x198 <main+0x68>
		{
			PORTD |= (1<<PD7); //high
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	80 68       	ori	r24, 0x80	; 128
 194:	8b b9       	out	0x0b, r24	; 11
 196:	ce cf       	rjmp	.-100    	; 0x134 <main+0x4>
		}
		else
		{
			PORTD &= ~(1<<PD7); //low
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	ca cf       	rjmp	.-108    	; 0x134 <main+0x4>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
